
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/example_dss_line.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_example_dss_line.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_example_dss_line.py:


Remove line noise with ZapLine
==============================

Find a spatial filter to get rid of line noise [1]_.

Uses meegkit.dss_line().

References
----------
.. [1] de Cheveign√©, A. (2019). ZapLine: A simple and effective method to
    remove power line artifacts [Preprint]. https://doi.org/10.1101/782029

.. GENERATED FROM PYTHON SOURCE LINES 15-25

.. code-block:: default

    # Authors: Maciej Szul <maciej.szul@isc.cnrs.fr>
    #          Nicolas Barascud <nicolas.barascud@gmail.com>
    import os

    import matplotlib.pyplot as plt
    import numpy as np
    from meegkit import dss
    from meegkit.utils import create_line_data, unfold
    from scipy import signal








.. GENERATED FROM PYTHON SOURCE LINES 26-28

Line noise removal
=============================================================================

.. GENERATED FROM PYTHON SOURCE LINES 30-33

Remove line noise with dss_line()
-----------------------------------------------------------------------------
We first generate some noisy data to work with

.. GENERATED FROM PYTHON SOURCE LINES 33-44

.. code-block:: default

    sfreq = 250
    fline = 50
    nsamples = 10000
    nchans = 10
    data = create_line_data(n_samples=3 * nsamples, n_chans=nchans,
                            n_trials=1, fline=fline / sfreq, SNR=2)[0]
    data = data[..., 0]  # only take first trial

    # Apply dss_line (ZapLine)
    out, _ = dss.dss_line(data, fline, sfreq, nkeep=1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [PCA] Explained variance of selected components : 85.44%
    Power of components removed by DSS: 0.82




.. GENERATED FROM PYTHON SOURCE LINES 45-46

Plot before/after

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    f, ax = plt.subplots(1, 2, sharey=True)
    f, Pxx = signal.welch(data, sfreq, nperseg=500, axis=0, return_onesided=True)
    ax[0].semilogy(f, Pxx)
    f, Pxx = signal.welch(out, sfreq, nperseg=500, axis=0, return_onesided=True)
    ax[1].semilogy(f, Pxx)
    ax[0].set_xlabel('frequency [Hz]')
    ax[1].set_xlabel('frequency [Hz]')
    ax[0].set_ylabel('PSD [V**2/Hz]')
    ax[0].set_title('before')
    ax[1].set_title('after')
    plt.show()





.. image-sg:: /auto_examples/images/sphx_glr_example_dss_line_001.png
   :alt: before, after
   :srcset: /auto_examples/images/sphx_glr_example_dss_line_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 60-63

Remove line noise with dss_line_iter()
-----------------------------------------------------------------------------
We first load some noisy data to work with

.. GENERATED FROM PYTHON SOURCE LINES 63-71

.. code-block:: default

    data = np.load(os.path.join('..', 'tests', 'data', 'dss_line_data.npy'))
    fline = 50
    sfreq = 200
    print(data.shape)  # n_samples, n_chans, n_trials

    # Apply dss_line(), removing only one component
    out1, _ = dss.dss_line(data, fline, sfreq, nremove=1, nfft=400)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (400, 64, 267)
    Power of components removed by DSS: 0.00




.. GENERATED FROM PYTHON SOURCE LINES 72-74

Now try dss_line_iter(). This applies dss_line() repeatedly until the
artifact is gone

.. GENERATED FROM PYTHON SOURCE LINES 74-77

.. code-block:: default

    out2, iterations = dss.dss_line_iter(data, fline, sfreq, nfft=400)
    print(f'Removed {iterations} components')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Power of components removed by DSS: 0.00
    Iteration 0 score: 8.822795627883049e-30
    Power of components removed by DSS: 0.00
    Iteration 1 score: 5.4599195390003376e-30
    Power of components removed by DSS: 0.00
    Iteration 2 score: 1.859728784534242e-31
    Power of components removed by DSS: 0.00
    Iteration 3 score: -2.861548485101899e-31
    Removed 3 components




.. GENERATED FROM PYTHON SOURCE LINES 78-79

Plot results with dss_line() vs. dss_line_iter()

.. GENERATED FROM PYTHON SOURCE LINES 79-93

.. code-block:: default

    f, ax = plt.subplots(1, 2, sharey=True)
    f, Pxx = signal.welch(unfold(out1), sfreq, nperseg=200, axis=0,
                          return_onesided=True)
    ax[0].semilogy(f, Pxx, lw=.5)
    f, Pxx = signal.welch(unfold(out2), sfreq, nperseg=200, axis=0,
                          return_onesided=True)
    ax[1].semilogy(f, Pxx, lw=.5)
    ax[0].set_xlabel('frequency [Hz]')
    ax[1].set_xlabel('frequency [Hz]')
    ax[0].set_ylabel('PSD [V**2/Hz]')
    ax[0].set_title('dss_line')
    ax[1].set_title('dss_line_iter')
    plt.tight_layout()
    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_example_dss_line_002.png
   :alt: dss_line, dss_line_iter
   :srcset: /auto_examples/images/sphx_glr_example_dss_line_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  22.651 seconds)


.. _sphx_glr_download_auto_examples_example_dss_line.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_dss_line.py <example_dss_line.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_dss_line.ipynb <example_dss_line.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
